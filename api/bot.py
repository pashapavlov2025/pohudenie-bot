# api/bot.py
import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from http.server import BaseHTTPRequestHandler

TOKEN = os.getenv("BOT_TOKEN")

# Handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –∏—Ä–æ–Ω–∏—á–Ω—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä –ø–æ –ø–æ—Ö—É–¥–µ–Ω–∏—é üòé "
        "–ü–∏—à–∏ /weight –∏–ª–∏ /note ‚Äî –Ω–∞—á–Ω—ë–º!"
    )

async def weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –≤–µ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: /weight 94.8")
        return
    weight = context.args[0]
    await update.message.reply_text(f"–ü—Ä–∏–Ω—è—Ç–æ: {weight} –∫–≥. "
                                    "–ì–ª–∞–≤–Ω–æ–µ, –Ω–µ –≤–∑–≤–µ—à–∏–≤–∞–π—Å—è –ø–æ—Å–ª–µ –ø–∏—Ü—Ü—ã üçï")

async def note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = " ".join(context.args)
    if not text:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏, —á—Ç–æ –µ–ª –∏–ª–∏ —á–µ–º –∑–∞–Ω–∏–º–∞–ª—Å—è üí™")
        return
    await update.message.reply_text(f"–ó–∞–ø–æ–º–Ω–∏–ª: ‚Äú{text}‚Äù. –ó–≤—É—á–∏—Ç –Ω–µ–ø–ª–æ—Ö–æ!")

# HTTP endpoint for Vercel
class handler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"Bot is alive on Render!")

# Telegram bot setup
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("weight", weight))
    app.add_handler(CommandHandler("note", note))
    app.run_polling()
